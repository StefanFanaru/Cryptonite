// <auto-generated />
using System;
using Cryptonite.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cryptonite.Infrastructure.Data.Migrations
{
    [DbContext(typeof(CryptoniteContext))]
    [Migration("20220501091100_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("cryptonite")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cryptonite.Core.Entities.BuyEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<decimal>("BoughtAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime>("BoughtAt")
                        .HasColumnType("date");

                    b.Property<string>("BoughtCryptocurrency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("PaidUsd")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("PaymentCurrency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BuyEntries");
                });

            modelBuilder.Entity("Cryptonite.Core.Entities.Currency", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<byte[]>("Currencies")
                        .IsRequired()
                        .HasColumnType("varbinary(5000)");

                    b.HasKey("Date");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Cryptonite.Core.Entities.Portofolio", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("LastTransactionAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Transactions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Portofolios");
                });

            modelBuilder.Entity("Cryptonite.Core.Entities.PortofolioCryptocurrency", b =>
                {
                    b.Property<string>("PortofolioId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Symbol")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PortofolioId", "Symbol");

                    b.ToTable("PortofolioCryptocurrencies");
                });

            modelBuilder.Entity("Cryptonite.Core.Entities.TradeEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<decimal>("GainedAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("GainedCryptocurrency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("PaidCryptocurrency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("TradedAt")
                        .HasColumnType("date");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TradeEntries");
                });

            modelBuilder.Entity("Cryptonite.Core.Entities.UserSettings", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("BankAccountCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("BankConversionMargin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0.0m);

                    b.Property<string>("PreferredCurrency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("USD");

                    b.HasKey("UserId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("Cryptonite.Infrastructure.Data.DataMigrations.DataMigration", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DataMigrations");
                });

            modelBuilder.Entity("Cryptonite.Core.Entities.PortofolioCryptocurrency", b =>
                {
                    b.HasOne("Cryptonite.Core.Entities.Portofolio", "Portofolio")
                        .WithMany("Cryptocurrencies")
                        .HasForeignKey("PortofolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portofolio");
                });

            modelBuilder.Entity("Cryptonite.Core.Entities.Portofolio", b =>
                {
                    b.Navigation("Cryptocurrencies");
                });
#pragma warning restore 612, 618
        }
    }
}
